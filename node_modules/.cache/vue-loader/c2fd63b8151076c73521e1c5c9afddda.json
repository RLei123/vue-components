{"remainingRequest":"C:\\Users\\RLei\\AppData\\Roaming\\npm\\node_modules\\@vue\\cli-service-global\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\Study\\Vue\\Components\\Puzzle.vue?vue&type=style&index=0&id=97a8bf28&scoped=true&lang=css&","dependencies":[{"path":"E:\\Study\\Vue\\Components\\Puzzle.vue","mtime":1565944899814},{"path":"C:\\Users\\RLei\\AppData\\Roaming\\npm\\node_modules\\@vue\\cli-service-global\\node_modules\\css-loader\\index.js","mtime":499162500000},{"path":"C:\\Users\\RLei\\AppData\\Roaming\\npm\\node_modules\\@vue\\cli-service-global\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\Users\\RLei\\AppData\\Roaming\\npm\\node_modules\\@vue\\cli-service-global\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\RLei\\AppData\\Roaming\\npm\\node_modules\\@vue\\cli-service-global\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\r\n.puzzle {\r\n  position: relative;\r\n  border: 2px solid #ccc;\r\n}\r\n\r\n.puzzle__block {\r\n  box-sizing: border-box;\r\n  position: absolute;\r\n  border: 1px solid #fff;\r\n  transition: all 0.3s;\r\n}\r\n",{"version":3,"sources":["Puzzle.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyIA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA","file":"Puzzle.vue","sourceRoot":".","sourcesContent":["<template>\r\n  <div class=\"puzzle\" :style=\"{width:width+'px',height:height+'px'}\">\r\n    <div\r\n      class=\"puzzle__block\"\r\n      v-for=\"(item,idx)  in blockPoints\"\r\n      :key=\"item.id\"\r\n      :style=\"{\r\n        width:blockWidth+'px',\r\n        height:blockHeight+'px',\r\n        left:item.x+'px',\r\n        top:item.y+'px',\r\n        backgroundImage:`url(${img})`,\r\n        backgroundPosition:`-${correctPoints[idx].x}px -${correctPoints[idx].y}px`,\r\n        opacity:idx===blockPoints.length-1&&0\r\n      }\"\r\n      @click=\"handleClick\"\r\n      :ref=\"idx===blockPoints.length-1?'empty':'block'\"\r\n      :data-correctX=\"correctPoints[idx].x\"\r\n      :data-correctY=\"correctPoints[idx].y\"\r\n    ></div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  props: {\r\n    width: {\r\n      type: Number,\r\n      default: 500\r\n    },\r\n    height: {\r\n      type: Number,\r\n      default: 500\r\n    },\r\n    row: {\r\n      type: Number,\r\n      default: 3\r\n    },\r\n    col: {\r\n      type: Number,\r\n      default: 3\r\n    },\r\n    img: {\r\n      type: String,\r\n      required: true\r\n    }\r\n  },\r\n  computed: {\r\n    blockWidth() {\r\n      return this.width / this.col;\r\n    },\r\n    blockHeight() {\r\n      return this.height / this.row;\r\n    },\r\n    correctPoints() {\r\n      const { row, col, blockWidth, blockHeight } = this;\r\n      const arr = [];\r\n      for (let r = 0; r < row; r++) {\r\n        for (let c = 0; c < col; c++) {\r\n          arr.push({\r\n            x: c * blockWidth,\r\n            y: r * blockHeight,\r\n            id: new Date().getTime() + Math.random() * 100\r\n          });\r\n        }\r\n      }\r\n      return arr;\r\n    },\r\n    blockPoints() {\r\n      const points = this.correctPoints;\r\n      const len = points.length;\r\n      const lastEle = points[len - 1];\r\n      const newArr = [...points];\r\n      newArr.length = len - 1;\r\n      newArr.sort(() => Math.random() - 0.5);\r\n      newArr.push(lastEle);\r\n\r\n      return newArr;\r\n    }\r\n  },\r\n  methods: {\r\n    //方框交换位置\r\n    handleClick(e) {\r\n      const blockDom = e.target;\r\n      const emptyDom = this.$refs.empty[0];\r\n      //if (!this.isAdjacent(blockDom, emptyDom)) return;\r\n      const { left, top } = blockDom.style;\r\n      blockDom.style.left = emptyDom.style.left;\r\n      blockDom.style.top = emptyDom.style.top;\r\n      emptyDom.style.left = left;\r\n      emptyDom.style.top = top;\r\n      //检查是否完成游戏\r\n      const winFlag = this.checkWin();\r\n      if (winFlag) this.winGame(emptyDom);\r\n    }, //判断是否可以交换位置，当位置相邻时可以交换\r\n    isAdjacent(blockDom, emptyDom) {\r\n      const { left: bLeft, top: bTop, width, height } = blockDom.style;\r\n      const { left: eLeft, top: eTop } = emptyDom.style;\r\n      const xDis = Math.floor(Math.abs(parseFloat(bLeft) - parseFloat(eLeft)));\r\n      const yDis = Math.floor(Math.abs(parseFloat(bTop) - parseFloat(eTop)));\r\n      const flag =\r\n        (bLeft == eLeft && yDis == parseInt(height)) || //在同一列，且top相差一个block高度\r\n        (bTop == eTop && xDis == parseInt(width)); //在同一行，且left相差一个block宽度\r\n\r\n      return flag;\r\n    }, //是否完成\r\n    checkWin() {\r\n      const bDomArr = this.$refs.block;\r\n      return bDomArr.every(dom => {\r\n        const { left: domLeft, top: domTop } = dom.style;\r\n        const { correctx: correctX, correcty: correctY } = dom.dataset;\r\n        const flag =\r\n          parseInt(domLeft) === parseInt(correctX) &&\r\n          parseInt(domTop) === parseInt(correctY);\r\n        return flag;\r\n      });\r\n    },\r\n    winGame(empty) {\r\n      setTimeout(() => {\r\n        alert(\"win\");\r\n        empty.style.opacity = 1;\r\n        setTimeout(() => {\r\n          this.gotoNext();\r\n        }, 300);\r\n      }, 300);\r\n    },\r\n    gotoNext() {\r\n      const flag = window.confirm(\"是否继续？\");\r\n      if (flag) {\r\n        this.$emit('next');\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.puzzle {\r\n  position: relative;\r\n  border: 2px solid #ccc;\r\n}\r\n\r\n.puzzle__block {\r\n  box-sizing: border-box;\r\n  position: absolute;\r\n  border: 1px solid #fff;\r\n  transition: all 0.3s;\r\n}\r\n</style>"]}]}